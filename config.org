#+latex_compiler: xelatex
#+latex_header: \usepackage[AUTO]{polyglossia}
#+latex_header: \setmainfont{Noto Sans}
#+latex_header: \setmonofont{Iosevka}

* emacs-organizer

Some code should be executing before tangling and evaluating this file.
So, look at init.el

** general emacs
*** package management
Add 4 main package archives
#+begin_src elisp
  (require 'package)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
#+end_src

#+RESULTS:
: ((gnu . https://elpa.gnu.org/packages/) (nongnu . https://elpa.nongnu.org/nongnu/) (melpa . https://melpa.org/packages/) (melpa-stable . https://stable.melpa.org/packages/))


Set priorites for package-archives
#+begin_src elisp
(setq package-archive-priorities
  '(("gnu" . 40)
    ("nongnu" . 30)
    ("melpa" . 20)))
#+end_src

#+RESULTS:
: ((gnu . 40) (nongnu . 30) (melpa . 20))

*** layout
See layout.org file -- [[./layout.org][link]]

#+begin_src elisp
    (use-package reverse-im
    :ensure t
    :custom
    (reverse-im-input-methods '("cyrillic-colemak"))
    :config
    (reverse-im-mode t)
    :pin melpa)
#+end_src

#+RESULTS:
: t


*** window management
If frame is devided by top and bottom, change it to left and right.
Transpose operation like with matrices and tables.
#+BEGIN_SRC elisp
(use-package transpose-frame :ensure t)
#+END_SRC

#+RESULTS:

Enable tab-bar-mode
#+begin_src elisp
  (tab-bar-mode)
#+end_src

#+RESULTS:
: t

*** autocomplete
Press C-M-i to activate emacs autocomplete.

Frankly speaking, I copy this snippet from the official vertico docs:

https://github.com/minad/vertico?tab=readme-ov-file#completion-at-point-and-completion-in-region

This configuration give my ability to perform fuzzy search.
Like with dmenu, rofi or fzf, but in emacs.

#+begin_src elisp
  (use-package vertico
    :init (vertico-mode)
     (setq completion-in-region-function
	      (lambda (&rest args)
		(apply (if vertico-mode
			   #'consult-completion-in-region
			 #'completion--in-region)
		       args)))
     :ensure t)

   (use-package consult :ensure t)

   (use-package consult-eglot :ensure t)
#+end_src

#+results:



*** Force UTF-8 and LF line endings

This should be executed before loading this file,
so this forms also present in init.el.
#+BEGIN_SRC elisp
(defvar *fs-encoding* 'utf-8)
(prefer-coding-system 'utf-8-unix)
#+END_SRC

*** modus-themes

Enable only in graphical mode.
#+begin_src elisp
  (use-package modus-themes :ensure t)

  (when (display-graphic-p)
    (load-theme 'modus-operandi t)
    (enable-theme 'modus-operandi))
#+end_src

#+RESULTS:


** config by use cases
I structured my config by use cases I apply emacs in.

*** file manager
I use build in dired for now.

Copy, move, rename files across panes,
like two-panel file manager
#+begin_src elisp
    (setq dired-dwim-target t)
#+end_src

#+RESULTS:
: t

*** git client
#+begin_src elisp
  (use-package magit :ensure t)

  (use-package git-modes :ensure t)
#+end_src

#+RESULTS:

*** organizer & writer's tool
#+begin_src elisp
  (use-package howm
    :custom
    (howm-search-other-dir t)
    :ensure t)
#+end_src

#+RESULTS:

#+begin_src elisp
    (when (not (eq system-type 'windows-nt))
         (setq howm-view-use-grep t))
#+end_src

#+RESULTS:

Function to add prop-line,
so I can use howm with any other major mode,
with org-mode for examlpe
#+begin_src elisp
	(defun howm-insert-prop-line (mode)
      "Activate major mode and modify the file so that this mode is activated
    automatically the next time it is opened"
      (interactive (list (intern-soft
			  (completing-read "Choose major mode: "
					   (mapcar #'cdr auto-mode-alist)))))
      (howm-mode)
      (unless (or (null mode)
		  (eq mode major-mode))
	(funcall mode)
	(howm-mode)
	(add-file-local-variable-prop-line
	 'mode (intern (string-trim-right (symbol-name mode) "-mode\\'")))))
#+end_src

#+RESULTS:
: howm-insert-prop-line

**** spelling
#+begin_src elisp
  (use-package ispell
  :init
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "en_US,ru_RU,be_BY")
  :custom
  (ispell-program-name "hunspell")
  (ispell-dictionary "en_US,ru_RU,be_BY"))
#+end_src


#+RESULTS:


**** org-mode as better notebook
#+begin_src elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t)
     (shell . t)
     (lisp . t)
     (emacs-lisp . t)
     (python . t)
     (dot . t)
     (plantuml . t)))
#+end_src

#+RESULTS:

**** diagrams with plantuml
Installed plantuml from openSUSE package manager.

#+begin_src elisp
  (setq org-plantuml-exec-mode 'plantuml) 
#+end_src

#+RESULTS:
: plantuml

*** flascards
Even with all of org-drill bugs I like it much more than Anki
-[2024-12-12]

#+begin_src elisp
      (use-package org-drill
      :after howm
      :pin melpa
      :ensure t)
#+end_src

#+RESULTS:

#+begin_src elisp
  (defun my-org-drill-file-names-in-howm ()
  "Return list of absolute filenames of org-drill files in howm"
  (delete-dups
   (mapcar #'car (howm-grep "\:drill\:"
			    (howm-files-in-directory howm-directory)))))
#+end_src


#+begin_src elisp
    (defun my-org-drill-set-scope ()
      (interactive)
	(let ((scope-var
	      (completing-read "Choose scope for org-drill: " (list
		   "howm"
		   "file"
		   "tree"
		   "file-no-restriction"
		   "agenda"
		   "agenda-with-archives"
		  "directory"))))
	(if (equal scope-var "howm")
      (setq org-drill-scope (my-org-drill-file-names-in-howm))
    (setq org-drill-scope (intern scope-var)))))
#+end_src

#+RESULTS:
: my-org-drill-set-scope

#+begin_src elisp
  (define-advice org-drill (:before (&rest _args))
    (my-org-drill-set-scope))

  (define-advice org-drill-cram (:before (&rest _args))
    (my-org-drill-set-scope))
#+end_src

#+RESULTS:

**** workarounds
#+begin_src elisp
  (defun org-drill-time-to-inactive-org-timestamp (time)
  "Convert TIME into org-mode timestamp."
  (format-time-string
   (concat "[" (cdr org-time-stamp-formats) "]")
   time))
#+end_src

*** todo list and pomodoro
#+begin_src elisp
  (setq org-todo-keywords
      '((sequence "TODO" "|" "DONE" "FAIL" "NGMI" )))
#+end_src

#+RESULTS:
| sequence | TODO |   |   | DONE | FAIL | NGMI |

**** Work arounds
Use C locale for time on windows for org-pomodoro

#+begin_src elisp
(when (eq system-type 'windows-nt)
(setq system-time-locale "C"))
#+end_src

#+RESULTS:
: C

*** xelatex editor
#+begin_src elisp
  (use-package auctex :ensure t)
#+end_src

#+RESULTS:

I write my coursework in xelatex.
#+BEGIN_SRC elisp
(setq-default TeX-engine 'xetex)
#+END_SRC

#+RESULTS:
: xetex

From auctex info:
#+begin_src elisp
     (setq TeX-auto-save t)
     (setq TeX-parse-self t)
     (setq-default TeX-master nil)
#+end_src

#+RESULTS:

*** code editor

****  python 
#+begin_src elisp
  (use-package pyvenv :ensure t)
#+end_src

#+RESULTS:

#+begin_src elisp
  (use-package elpy :ensure t)
#+end_src

#+RESULTS:

**** common lisp
#+begin_src elisp
  (use-package slime :ensure t)
#+end_src

#+RESULTS:

#+begin_src elisp
  (setq inferior-lisp-program "sbcl")
#+end_src

#+RESULTS:
: sbcl

**** EditorConfig
#+begin_src elisp
  (use-package editorconfig :ensure t)
#+end_src

#+RESULTS:

**** assembly and compiler exploration
Compiler explorer
#+begin_src elisp
  (use-package rmsbolt :ensure t)
#+end_src

Assembly 
#+begin_src elisp
  (use-package nasm-mode :ensure t)
#+end_src

#+RESULTS:
: t

**** data and config files
Systemd units
#+begin_src elisp
  (use-package systemd :ensure t)
#+end_src

#+RESULTS:

Comma separated values
#+begin_src elisp
  (use-package csv :ensure t)
#+end_src

#+RESULTS:

YAML
#+begin_src elisp
  (use-package yaml-mode :ensure t)
#+end_src

#+RESULTS:

NGINX and Angie

#+begin_src elisp
  (use-package nginx-mode :ensure t)
#+end_src

#+RESULTS:

**** chip design
#+begin_src elisp
  (use-package verilog-mode :ensure t)
#+end_src

#+RESULTS:

#+begin_src elisp
  (use-package verilog-ext :ensure t)
#+end_src

#+RESULTS:

*** terminal
#+begin_src elisp
  (use-package eat
    :config
    (setq eat-kill-buffer-on-exit t)
    (setq eat-enable-mouse t)
    :ensure t)
#+end_src
*** rss reader
Elfeed in my config is interconneted with howm.

**** elfeed use-package:
#+BEGIN_SRC elisp
  (use-package elfeed
  :ensure t
  :config
  (setq elfeed-db-directory "~/howm/.elfeed")
    (setq elfeed-curl-program-name "curl"))
  (use-package elfeed-protocol) 
#+END_SRC

#+RESULTS:

**** elfeed-org use-package
#+BEGIN_SRC elisp
(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  :after howm)
#+END_SRC

#+RESULTS:
: t

**** functions for interconnecting with howm
#+BEGIN_SRC elisp
(defun my-elfeed-file-names-in-howm ()
  "Return list of absolute filenames of org-elfeed files in howm"
  (delete-dups
   (mapcar #'car (howm-grep "\:elfeed\:"
		      (howm-files-in-directory howm-directory)))))
  
#+END_SRC

#+RESULTS:
: my-elfeed-file-names-in-howm

**** advices for executing functions
#+BEGIN_SRC elisp
(define-advice elfeed (:before (&rest _args))
  (setq rmh-elfeed-org-files (my-elfeed-file-names-in-howm)))


(define-advice elfeed-update (:before (&rest _args))
  (setq rmh-elfeed-org-files (my-elfeed-file-names-in-howm)))
#+END_SRC

#+RESULTS:

*** email client
#+begin_src elisp
  (setq 
     user-full-name "Корякин Артём"
     user-mail-address "karakin2000@gmail.com"
     send-mail-function 'smtpmail-send-it
     smtpmail-smtp-server "smtp.gmail.com"
     smtpmail-stream-type 'starttls ;; was nil (upgrade with STARTTLS if possible)
     smtpmail-smtp-service 587
     smtpmail-servers-requiring-authorization "*"
     gnus-save-score t
     gnus-startup-file "~/howm/.newsrc"
     gnus-backup-startup-file 'never
     gnus-select-method
     '(nnimap "gmail"
	      (nnimap-address "imap.gmail.com")
	      (nnmail-expiry-target "nnimap+gmail:[Gmail]/Корзина")
	      (nnimap-server-port 993)
	      (nnimap-stream ssl)
	      (gnus-search-engine gnus-search-imap)
	      (nnmail-expiry-wait immediate)))
#+end_src

#+RESULTS:
| nnimap | gmail | (nnimap-address imap.gmail.com) | (nnmail-expiry-target nnimap+gmail:[Gmail]/Корзина) | (nnimap-server-port 993) | (nnimap-stream ssl) | (gnus-search-engine gnus-search-imap) | (nnmail-expiry-wait 1) |

*** epub reader
#+begin_src elisp
  (use-package nov :ensure t)
#+end_src

#+RESULTS:
