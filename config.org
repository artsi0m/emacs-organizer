* emacs-organizer

Some code should be executing before tangling and evaluating this file.
So, look at init.el

** layout
I use colemak keyboard layout see layout.org file -- [[./layout.org][link]]

** Dependensies

This emacs configuration depends on:
- ability of emacs to use gui features to render formulas
- texlive or miktex for describing formulas
- perl as a dependency for latexmk
- clangd for C and C++ programming
- gnu coreutils for dired on OpenBSD

** general emacs
*** Add 4 main package archives
#+begin_src elisp
  (require 'package)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
  (package-initialize)
#+end_src

#+RESULTS:
: t


*** Set priorites for package-archives
#+begin_src elisp
(setq package-archive-priorities
  '(("gnu" . 40)
    ("nongnu" . 30)
    ("melpa-stable" . 20)
    ("melpa" . 10)))
#+end_src

#+RESULTS:
: ((gnu . 40) (nongnu . 30) (melpa-stable . 20) (melpa . 10))


*** window management
**** transpose frame
If frame is devided by top and bottom, change it to left and right.
Transpose operation like with matrices and tables.
#+BEGIN_SRC elisp
(use-package transpose-frame)
#+END_SRC

#+RESULTS:
: t

**** enable tab-bar-mode
#+begin_src elisp
  (setq tab-bar-mode t)
#+end_src

#+RESULTS:
: t

**** disable scroll-bar
#+begin_src elisp
  (setq scroll-bar-mode nil)
#+end_src

#+RESULTS:

*** autocomplete
Press C-M-i to activate emacs autocomplete.

Frankly speaking, I copy this snippet from the official vertico docs:

https://github.com/minad/vertico?tab=readme-ov-file#completion-at-point-and-completion-in-region

This configuration give my ability to perform fuzzy search.
Like with dmenu, rofi or fzf, but in emacs.

#+begin_src elisp
(use-package vertico
  :init (vertico-mode)
   (setq completion-in-region-function
	    (lambda (&rest args)
	      (apply (if vertico-mode
			 #'consult-completion-in-region
		       #'completion--in-region)
		     args))))

 (use-package consult)

 (use-package consult-eglot)
#+end_src

#+results:



*** Force UTF-8 and LF line endings

This should be executed before loading this file,
so this forms also present in init.el.
#+BEGIN_SRC elisp
(defvar *fs-encoding* 'utf-8)
(prefer-coding-system 'utf-8-unix)
#+END_SRC


** use cases of my emacs config
I structured my config by use cases I apply emacs in.

*** study organizer

**** Notes, personal wiki, z-word â€” howm

I use handy own wiki mode, and I use it by a lot.
I use howm with org mode, to do this I decided to put
=# -*- mode: org -*-= in every file with org.
I also plan to use howm with markdown and other syntaxes later.

#+begin_src elisp
  (use-package howm)
#+end_src

#+RESULTS:

**** Why I dont use external grep
I removed =howm-vies-use-grep= variable, because on windows,
with installed grep from scoop,
is is somehow made searching slower.

**** Various org-todo-keywords
#+begin_src elisp
  (setq org-todo-keywords
      '((sequence "TODO" "|" "DONE" "FAIL" "NGMI" )))
#+end_src

#+RESULTS:
| sequence | TODO |   |   | DONE | FAIL | NGMI |

**** pomodoro timer inside notes
I use org-pomodoro.

#+BEGIN_SRC elisp
(use-package org-pomodoro)
#+END_SRC

#+RESULTS:

***** Work arounds
Use C locale for time on windows

#+begin_src elisp
(when (eq system-type 'windows-nt)
(setq system-time-locale "C"))
#+end_src

#+RESULTS:
: C


***** TODO Create ffplay-sound to play sound using cross-platform ffplay

**** Coursework and various docs
I write my coursework in xelatex.
#+BEGIN_SRC elisp
(setq-default TeX-engine 'xetex)
#+END_SRC

#+RESULTS:
: xetex


*** programming
**** language server client
#+BEGIN_SRC elisp
(use-package eglot)
#+END_SRC

****  python venv support
#+BEGIN_SRC elisp
(use-package pyvenv)
#+END_SRC

**** Use sbcl as lisp interpreter
#+begin_src elisp
  (setq inferior-lisp-program "sbcl")
#+end_src

#+RESULTS:
: sbcl

*** file manager
I use build in dired for now.

**** Copy, move, rename files across panes
#+BEGIN_SRC elisp
  (setq dired-dwim-target t)
#+END_SRC

#+RESULTS:
: t

**** Work-arounds

*** rss reader
Elfeed in my config is interconneted with howm.

**** elfeed use-package:
#+BEGIN_SRC elisp
  (use-package elfeed
  :ensure t
  :config
  (setq elfeed-db-directory "~/howm/.elfeed")
    (setq elfeed-curl-program-name "curl"))
  (use-package elfeed-protocol) 
#+END_SRC

**** elfeed-org use-package
#+BEGIN_SRC elisp
(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  :after howm)
#+END_SRC

**** functions for interconnecting with howm
#+BEGIN_SRC elisp
(defun my-elfeed-file-names-in-howm ()
  "Return list of absolute filenames of org-elfeed files in howm"
  (delete-dups
   (mapcar #'car (howm-grep "\:elfeed\:"
		      (howm-files-in-directory howm-directory)))))
  
#+END_SRC

**** advices for executing functions
#+BEGIN_SRC elisp
(define-advice elfeed (:before (&rest _args))
  (setq rmh-elfeed-org-files (my-elfeed-file-names-in-howm)))


(define-advice elfeed-update (:before (&rest _args))
  (setq rmh-elfeed-org-files (my-elfeed-file-names-in-howm)))
#+END_SRC

*** email client

I use gnus with =nnimap= source.

This is not the best choice, because with [[https://cr.yp.to/proto/maildir.html][maildir]] it would be indexed fast.
Other pluses of maildir:
- You store your mail locally which means you distrust ifrastracture of mail provider.
- You store your mail locally which means you don't need internet connection.
- You can configure other program for fetching and indexing.

Minuses of maildir:
- You can't use it on Windows, not enough programms to fetch and index.
  
**** Configured with custom
I configured my gnus setup enterily with custom,
see =custom-set-variables= in init.el

