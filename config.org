* emacs-organizer

Some code should be executing before tangling and evaluating this file.
So, look at init.el

** layout
I use colemak keyboard layout see layout.org file -- [[./layout.org][link]]

** Dependensies

This emacs configuration depends on:
- ability of emacs to use gui features to render formulas
- texlive or miktex for describing formulas
- perl as a dependency for latexmk
- clangd for C and C++ programming
- gnu coreutils for dired on OpenBSD

** general emacs

*** window management
If frame is devided by top and bottom, change it to left and right.
Transpose operation like with matrices and tables.
#+BEGIN_SRC elisp
(use-package transpose-frame)
#+END_SRC

#+RESULTS:

*** autocomplete
Press C-M-i to activate emacs autocomplete.

Frankly speaking, I copy this snippet from the official vertico docs:

https://github.com/minad/vertico?tab=readme-ov-file#completion-at-point-and-completion-in-region

This configuration give my ability to perform fuzzy search.
Like with dmenu, rofi or fzf, but in emacs.

#+BEGIN_SRC elisp
(use-package vertico
  :init (vertico-mode)
   (setq completion-in-region-function
	    (lambda (&rest args)
	      (apply (if vertico-mode
			 #'consult-completion-in-region
		       #'completion--in-region)
		     args))))

 (use-package consult)

 (use-package consult-eglot)
#+END_SRC

#+RESULTS:

*** Force UTF-8 and LF line endings

This should be executed before loading this file,
so this forms also present in init.el.
#+BEGIN_SRC elisp
(defvar *fs-encoding* 'utf-8)
(prefer-coding-system 'utf-8-unix)
#+END_SRC



** use cases my emacs config
I structured my config by use cases I apply emacs in.

*** study organizer

**** Notes, personal wiki, z-word â€” howm

I use handy own wiki mode, and I use it by a lot.
I use howm with org mode, to do this I
1. changed =howm-view-title-header= to org-mode title
2. changed =howm-file-name-format= to end with org file name extension.


#+BEGIN_SRC elisp
  (use-package howm
    :init (setq howm-view-title-header "*")
    (setq howm-file-name-format "%Y/%m/%Y-%m-%d-%H%M%S.org"))    
#+END_SRC

**** I use howm with org-mode
I also use latex with org-mode.
Inline latex previews for formulas in flashcards was initial reason to switch to emacs for me.

#+BEGIN_SRC elisp
(use-package org

  :custom
  (org-format-latex-options
   '(:foreground default :background default :scale 2 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
		     ("begin" "$1" "$" "$$" "\\(" "\\[")))
  (org-todo-keywords
   '((sequence "TODO(1)" "|" "DONE(2)" "FAIL(3)" "NGMI(4)" )))
  :after howm)
#+END_SRC

#+RESULTS:

**** pomodoro timer inside notes
I use org-pomodoro.

#+BEGIN_SRC elisp
(use-package org-pomodoro)
#+END_SRC

***** Work arounds
Use C locale for time on windows
#+BEGIN_SRC elisp
(when (eq system-type 'windows-nt)
(setq system-time-locale "C"))
#+END_SRC

#+RESULTS:
: C



***** TODO Create ffplay-sound to play sound using cross-platform ffplay

**** flashcards inside notes: org-fc

***** Integration with howm
****** Constants with regexp
#+BEGIN_SRC elisp
  (defconst my-howm-subsubdir-regexp
  (rx (seq "howm/" (= 4 num ) "/" (= 2 num)))
  "Regexp that matches second level of subdirectories in howm,
   like  ~/homw/2024/01/, but with ltximg")



(defconst my-howm-excluded-subdirs-regexp
  (rx (or ".git" ".elfeed" "ltximg"))
  "Regexp that matches howm subdirs that I don't need
   like .git .elfeed and ltximg, basically like .gitignore,
   but i don't want to rely on them")

#+END_SRC

#+RESULTS:
: my-howm-excluded-subdirs-regexp

****** Exlude files from howm subsubdirs:
#+BEGIN_SRC elisp
  (defun my-howm-subsubdir-exclude (dir)
  (if (string-match-p my-howm-subsubdir-regexp dir)
      (unless
	  (string-match-p my-howm-excluded-subdirs-regexp dir) dir)
    nil))
#+END_SRC

#+RESULTS:
: my-howm-subsubdir-exclude

****** Return filtered list of subsubdirs of howm:
#+BEGIN_SRC elisp
  (defun my-howm-subsubdirs ()
  (thread-last
    (directory-files-recursively
     howm-directory directory-files-no-dot-files-regexp t)
    (seq-filter #'file-directory-p)
    (seq-filter #'my-howm-subsubdir-exclude)))
#+END_SRC

#+RESULTS:
: my-howm-subsubdirs


***** org-fc use-package
#+BEGIN_SRC elisp
(use-package hydra)

(use-package org-fc
  :load-path ("~/.emacs.d/site-lisp/org-fc/")
  :custom
  (org-fc-review-history-file "~/howm/.org-fc-reviews.tsv")
  (org-fc-directories (my-howm-subsubdirs))
  (org-fc-mixed-line-endings t)
  :config
  (require 'org-fc-hydra)
  :after howm)
  
#+END_SRC

#+RESULTS:
: t
***** TODO Make org-fc usable on Windows
****** Set powershell to default shell on Windos
#+BEGIN_SRC elisp
  (when (eq system-type 'windows-nt)
    (setq shell-file-name "pwsh.exe"))
#+END_SRC


******  Try to use powershell.
******* FAIL Get-Item in place of find
#+BEGIN_SRC elisp
     (when (eq system-type 'windows-nt)
     (defun org-fc-awk--find (paths)
	    (format
	     "Get-ChildItem -Path %s -Name -include '*.org' -exclude '.*' -Recurse"
	     (mapconcat (lambda (path) (shell-quote-argument (expand-file-name path)))
				  paths " "))))


#+END_SRC

******** TODO Replace expand-file-name part

******* Command substitution in place of xargs
#+BEGIN_SRC elisp
  (when (eq system-type 'windows-nt)
    (defun org-fc-awk--xargs (command)
      (concat  "%{ @(" command ")" )))
#+END_SRC


**** flashcards inside notes: org-drill
I am trying to switch to org-fc by now.

#+BEGIN_SRC elisp
(use-package org-drill
  :after howm)
#+END_SRC



*****  Function for discovering org-drill cards in howm
#+BEGIN_SRC elisp
(defun my-org-drill-file-names-in-howm ()
  "Return list of absolute filenames of org-drill files in howm"
  (delete-dups
   (mapcar #'car (howm-grep "\:drill\:"
			    (howm-files-in-directory howm-directory)))))
#+END_SRC

***** Command for creating new org-drill cards.

I want to create less of them, actually.
But by now I want some kind of separtion,
therefor there is dedicated dir in howm.

#+BEGIN_SRC elisp
  (defun my-org-drill-create ()
    (interactive)
    (let ((filename   (format "~/howm/org.drill.cards/%s.org"
				      (format-time-string "%F-%H%M%S"))))
	    (make-empty-file filename)
	    (switch-to-buffer filename)
	    (set-visited-file-name filename)
	    (org-mode)
	    (howm-mode)
	    (org-insert-heading)))

#+END_SRC

#+RESULTS:
: my-org-drill-create

**** agenda in howm
Need this for calfw and org-timeblock.
#+BEGIN_SRC elisp
  (defun my-org-agenda-file-names-in-howm ()
  "Return list of absoulute filenames of files with :agenda: tag in howm"
  (delete-dups
   (mapcar #'car (howm-grep "\:agenda\:"
			    (howm-files-in-directory howm-directory)))))

#+END_SRC

#+RESULTS:
: my-org-agenda-file-names-in-howm


#+BEGIN_SRC elisp
  (define-advice org-agenda (:before (&rest _args))
  (setq org-agenda-files (my-org-agenda-file-names-in-howm)))

#+END_SRC

#+RESULTS:

***** TODO Try to use org-gcal
**** calendar interconnected with notes: calfw
Calfw use dates from holidays.el by default,
but there is packages that adds org and howm dates support.
There is also ability to get schedule from iis.bsuir.by in iCalendar format.

#+BEGIN_SRC elisp
(use-package calfw-org :after calfw)
(use-package calfw-howm :after calfw)
#+END_SRC

***** use-package and calendar command
#+BEGIN_SRC elisp
  (use-package calfw
  :config
  (require 'calfw-org)
  (require 'calfw-howm)
  
  (defun my-open-calendar ()
    (interactive)
    (setq org-agenda-files (my-org-agenda-file-names-in-howm))
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      (cfw:org-create-source)
      (cfw:howm-create-source))))
  
  :after howm)
#+END_SRC

#+RESULTS:

***** Draw calendar in howm (inline)
Append function into howm allowed functions,
that howm would execute after start.
#+BEGIN_SRC elisp
(setq howm-menu-allow
	    (append '(cfw:howm-schedule-inline) howm-menu-allow))
#+END_SRC

**** Timeblocking with org-timeblock
By now [2024-02-18] org-timeblock is broken on my side.
However I may use =org-timeblock-list=

#+BEGIN_SRC elisp
    (use-package org-timeblock
      :load-path "~/.emacs.d/site-lisp/org-timeblock")
#+END_SRC

#+RESULTS:

***** Advice for integrating with howm:
#+BEGIN_SRC elisp
(define-advice org-timeblock-redraw-buffers (:before (&rest _args))
  (setq org-agenda-files (my-org-agenda-file-names-in-howm)))
#+END_SRC

***** TODO Fix org-timeblock
At first switch to commit when it worked.

**** Coursework and various docs
I write my coursework in xelatex.
#+BEGIN_SRC elisp
  (setq-default TeX-engine 'xetex)
#+END_SRC

#+RESULTS:
: xetex

*** programming
**** language server client
#+BEGIN_SRC elisp
(use-package eglot)
#+END_SRC

**** python venv support
#+BEGIN_SRC elisp
(use-package pyvenv)
#+END_SRC


*** file manager
I use build in dired for now.

**** Work-arounds

***** OpenBSD
Use ls from GNU coreutils on OpenBSD
#+BEGIN_SRC elisp
  (when (eq system-type 'berkeley-unix)
  (setq insert-directory-program "gls")) 
#+END_SRC



*** rss reader 
Elfeed in my config is interconneted with howm.

**** elfeed use-package:
#+BEGIN_SRC elisp
(use-package elfeed
  :ensure t
  :config
  (setq elfeed-db-directory "~/howm/.elfeed")
    (setq elfeed-curl-program-name "curl"))
#+END_SRC

**** elfeed-org use-package
#+BEGIN_SRC elisp
(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  :after howm)
#+END_SRC

**** functions for interconnecting with howm
#+BEGIN_SRC elisp
(defun my-elfeed-file-names-in-howm ()
  "Return list of absolute filenames of org-elfeed files in howm"
  (delete-dups
   (mapcar #'car (howm-grep "\:elfeed\:"
		      (howm-files-in-directory howm-directory)))))
  
#+END_SRC

**** advices for executing functions
#+BEGIN_SRC elisp
(define-advice elfeed (:before (&rest _args))
  (setq rmh-elfeed-org-files (my-elfeed-file-names-in-howm)))


(define-advice elfeed-update (:before (&rest _args))
  (setq rmh-elfeed-org-files (my-elfeed-file-names-in-howm)))
#+END_SRC



