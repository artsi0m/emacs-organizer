* emacs-organizer

Some code should be executing before tangling and evaluating this file.
So, look at init.el

** layout
I use colemak keyboard layout see layout.org file -- [[./layout.org][link]]

** general emacs
*** package management
Add 4 main package archives
#+begin_src elisp
  (require 'package)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t)
  (package-initialize)
#+end_src

#+RESULTS:
: t


Set priorites for package-archives
#+begin_src elisp
(setq package-archive-priorities
  '(("gnu" . 40)
    ("nongnu" . 30)
    ("melpa-stable" . 20)
    ("melpa" . 10)))
#+end_src

#+RESULTS:
: ((gnu . 40) (nongnu . 30) (melpa-stable . 20) (melpa . 10))


*** window management
If frame is devided by top and bottom, change it to left and right.
Transpose operation like with matrices and tables.
#+BEGIN_SRC elisp
(use-package transpose-frame :ensure t)
#+END_SRC

#+RESULTS:

Enable tab-bar-mode
#+begin_src elisp
  (setq tab-bar-mode t)
#+end_src

#+RESULTS:
: t

Disable scroll-bar
#+begin_src elisp
  (setq scroll-bar-mode nil)
#+end_src

#+RESULTS:

*** autocomplete
Press C-M-i to activate emacs autocomplete.

Frankly speaking, I copy this snippet from the official vertico docs:

https://github.com/minad/vertico?tab=readme-ov-file#completion-at-point-and-completion-in-region

This configuration give my ability to perform fuzzy search.
Like with dmenu, rofi or fzf, but in emacs.

#+begin_src elisp
  (use-package vertico
    :init (vertico-mode)
     (setq completion-in-region-function
	      (lambda (&rest args)
		(apply (if vertico-mode
			   #'consult-completion-in-region
			 #'completion--in-region)
		       args)))
     :ensure t)

   (use-package consult :ensure t)

   (use-package consult-eglot :ensure t)
#+end_src

#+results:



*** Force UTF-8 and LF line endings

This should be executed before loading this file,
so this forms also present in init.el.
#+BEGIN_SRC elisp
(defvar *fs-encoding* 'utf-8)
(prefer-coding-system 'utf-8-unix)
#+END_SRC

*** tool-bar
Show both icons and caption
#+begin_src elisp
   (setq tool-bar-style 'both)
#+end_src
use emacs icons instead of gtk ones

#+begin_src elisp
  (advice-add #'x-gtk-map-stock :override #'ignore)
#+end_src
*** y-or-n
#+begin_src elisp
  (defalias 'yes-or-no #'y-or-n-p)
#+end_src

#+RESULTS:
: yes-or-no

** config by use cases
I structured my config by use cases I apply emacs in.

*** file manager
I use build in dired for now.

Copy, move, rename files across panes,
like two-panel file manager
#+begin_src elisp
    (setq dired-dwim-target t)
#+end_src

#+RESULTS:
: t

*** git client
#+begin_src elisp
  (use-package magit :ensure t)

  (use-package git-modes :ensure t)
#+end_src

#+RESULTS:

*** organizer
#+begin_src elisp
     (use-package howm :config
       (setq howm-view-use-grep t)
       :ensure t)
#+end_src

#+RESULTS:

Function to add prop-line,
so I can use howm with any other major mode,
with org-mode for examlpe
#+begin_src elisp
      (defun howm-insert-prop-line ()
  "Activate major mode and modify the file so that this mode is activated
  automatically the next time it is opened"
      (interactive)
      (howm-mode)
      (let*
	  ((modes (mapcar #'cdr auto-mode-alist))
	   (mode-name (completing-read "Choose major mode: " modes))
	   (mode (intern-soft mode-name)))
	(unless (or (null mode)
	    (eq mode major-mode))
	  (funcall mode)
	  (howm-mode)
	  (add-file-local-variable-prop-line
	   'mode (intern (string-trim-right mode-name "-mode\\'"))))))
#+end_src

*** flascards
#+begin_src elisp
  (use-package anki-editor :ensure t)
#+end_src

#+RESULTS:

*** todo list and pomodoro
#+begin_src elisp
  (setq org-todo-keywords
      '((sequence "TODO" "|" "DONE" "FAIL" "NGMI" )))
#+end_src

#+RESULTS:
| sequence | TODO |   |   | DONE | FAIL | NGMI |

#+BEGIN_SRC elisp
(use-package org-pomodoro :ensure t)
#+END_SRC

#+RESULTS:

**** Work arounds
Use C locale for time on windows

#+begin_src elisp
(when (eq system-type 'windows-nt)
(setq system-time-locale "C"))
#+end_src

#+RESULTS:
: C

*** xelatex editor
#+begin_src elisp
  (use-package auctex :ensure t)
#+end_src

#+RESULTS:

I write my coursework in xelatex.
#+BEGIN_SRC elisp
(setq-default TeX-engine 'xetex)
#+END_SRC

#+RESULTS:
: xetex


*** code editor

****  python 
#+begin_src elisp
  (use-package pyvenv :ensure t)
#+end_src

#+RESULTS:

#+begin_src elisp
  (use-package elpy :ensure t)
#+end_src

#+RESULTS:

**** common lisp
#+begin_src elisp
  (use-package slime :ensure t)
#+end_src

#+RESULTS:

#+begin_src elisp
  (setq inferior-lisp-program "sbcl")
#+end_src

#+RESULTS:
: sbcl

**** EditorConfig
#+begin_src elisp
  (use-package editorconfig :ensure t)
#+end_src

#+RESULTS:

**** assembly
#+begin_src elisp
  (use-package rmsbolt :ensure t)
#+end_src

*** terminal
#+begin_src elisp
  (use-package eat
    :config
    (setq eat-kill-buffer-on-exit t)
    (setq eat-enable-mouse t)
    :ensure t)
#+end_src
*** rss reader
Elfeed in my config is interconneted with howm.

**** elfeed use-package:
#+BEGIN_SRC elisp
  (use-package elfeed
  :ensure t
  :config
  (setq elfeed-db-directory "~/howm/.elfeed")
    (setq elfeed-curl-program-name "curl"))
  (use-package elfeed-protocol) 
#+END_SRC

#+RESULTS:

**** elfeed-org use-package
#+BEGIN_SRC elisp
(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  :after howm)
#+END_SRC

#+RESULTS:
: t

**** functions for interconnecting with howm
#+BEGIN_SRC elisp
(defun my-elfeed-file-names-in-howm ()
  "Return list of absolute filenames of org-elfeed files in howm"
  (delete-dups
   (mapcar #'car (howm-grep "\:elfeed\:"
		      (howm-files-in-directory howm-directory)))))
  
#+END_SRC

#+RESULTS:
: my-elfeed-file-names-in-howm

**** advices for executing functions
#+BEGIN_SRC elisp
(define-advice elfeed (:before (&rest _args))
  (setq rmh-elfeed-org-files (my-elfeed-file-names-in-howm)))


(define-advice elfeed-update (:before (&rest _args))
  (setq rmh-elfeed-org-files (my-elfeed-file-names-in-howm)))
#+END_SRC

#+RESULTS:

*** email client
#+begin_src elisp
  (setq 
     user-full-name "Корякин Артём"
     user-mail-address "karakin2000@gmail.com"
     send-mail-function 'smtpmail-send-it
     smtpmail-smtp-server "smtp.gmail.com"
     smtpmail-stream-type 'starttls ;; was nil (upgrade with STARTTLS if possible)
     smtpmail-smtp-service 587
     smtpmail-servers-requiring-authorization "*"
     gnus-save-score t
     gnus-startup-file "~/howm/.newsrc"
     gnus-backup-startup-file 'never
     gnus-select-method
     '(nnimap "gmail"
	      (nnimap-address "imap.gmail.com")
	      (nnmail-expiry-target "nnimap+gmail:[Gmail]/Корзина")
	      (nnimap-server-port 993)
	      (nnimap-stream ssl)
	      (gnus-search-engine gnus-search-imap)
	      (nnmail-expiry-wait 5)))
#+end_src

#+RESULTS:
| nnimap | gmail | (nnimap-address imap.gmail.com) | (nnmail-expiry-target nnimap+gmail:[Gmail]/Корзина) | (nnimap-server-port 993) | (nnimap-stream ssl) | (gnus-search-engine gnus-search-imap) | (nnmail-expiry-wait 5) |
