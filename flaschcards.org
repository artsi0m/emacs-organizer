* emacs setup for flashcards

I use either org-fc or org-drill.
I don't like how both packages work.

There is specific workarounds for them to work with my setup,
but I hope to create my own package eventually.

** org-fc

*** Integration with howm
**** Constants with regexp
#+begin_src elisp
  (defconst my-howm-subsubdir-regexp
  (rx (seq "howm/" (= 4 num ) "/" (= 2 num)))
  "Regexp that matches second level of subdirectories in howm,
   like  ~/homw/2024/01/, but with ltximg")



(defconst my-howm-excluded-subdirs-regexp
  (rx (or ".git" ".elfeed" "ltximg"))
  "Regexp that matches howm subdirs that I don't need
   like .git .elfeed and ltximg, basically like .gitignore,
   but i don't want to rely on them")

#+end_src

#+RESULTS:
: my-howm-excluded-subdirs-regexp

**** Exlude files from howm subsubdirs:
#+begin_src elisp
  (defun my-howm-subsubdir-exclude (dir)
  (if (string-match-p my-howm-subsubdir-regexp dir)
      (unless
	  (string-match-p my-howm-excluded-subdirs-regexp dir) dir)
    nil))
#+end_SRC

#+RESULTS:
: my-howm-subsubdir-exclude

**** Return filtered list of subsubdirs of howm:
#+begin_src elisp
  (defun my-howm-subsubdirs ()
  (thread-last
    (directory-files-recursively
     howm-directory directory-files-no-dot-files-regexp t)
    (seq-filter #'file-directory-p)
    (seq-filter #'my-howm-subsubdir-exclude)))
#+end_src

#+results:
: my-howm-subsubdirs

**** org-fc use-package
#+begin_src elisp
(use-package org-fc
  :load-path ("~/.emacs.d/site-lisp/org-fc/")
  :custom
  (org-fc-review-history-file "~/howm/.org-fc-reviews.tsv")
  (org-fc-directories (my-howm-subsubdirs))
  (org-fc-mixed-line-endings t)
  :after howm)
#+end_src

#+RESULTS:
**** DONE Make org-fc usable on Windows
Solve [[https://todo.sr.ht/~l3kn/org-fc/43][this]] issue.


****** DONE Try to use busybox from scoop
Busybox from [[https://scoop.sh][scoop]] has xargs, find and I already installed gawk.

**** org-fc-awk--find on windows

#+begin_src elisp
    (when (eq system-type 'windows-nt)
      (defun org-fc-awk--find (paths)
  	    (format
  "C:\\Users\\artsi0m\\scoop\\shims\\find.exe -L %s -type f -name \"*.org\" -not -name \".*\"  -print0" ;;
  	   (mapconcat  (lambda (path)
(shell-quote-argument (expand-file-name path)))
  		       paths " ")))) 
#+end_src

#+RESULTS:
: org-fc-awk--find

**** org-fc-awk--xargs on windows
#+begin_src elisp
  (when (eq system-type 'windows-nt)
    (defun org-fc-awk--xargs (command)
    (concat "C:\\Users\\artsi0m\\scoop\\shims\\xargs -0 "  command)))
#+end_src

#+RESULTS:
: org-fc-awk--xargs

**** Set path for gawk on windows
#+BEGIN_SRC elisp
(when (eq system-type 'windows-nt)
 (setq org-fc-review-history-file "c:/Users/artsi0m/howm/.org-fc-reviews.tsv"))
#+END_SRC

**** Error that I get sometimes with this setup
#+begin_src
(:path "-" :cards (
  )  :title nil)
#+end_src

** flashcards inside notes: org-drill
I am trying to switch to org-fc by now.

#+BEGIN_SRC elisp
(use-package org-drill
  :after howm)
#+END_SRC



***  Function for discovering org-drill cards in howm

#+begin_src elisp
(defun my-org-drill-file-names-in-howm ()
  "Return list of absolute filenames of org-drill files in howm"
  (delete-dups
   (mapcar #'car (howm-grep "\:drill\:"
			    (howm-files-in-directory howm-directory)))))
#+end_src

#+RESULTS:

#+RESULTS:
: my-org-drill-file-names-in-howm

: my-org-drill-file-names-in-howm


#+begin_src elisp
  (setq org-drill-scope (my-org-drill-file-names-in-howm))
#+end_src

#+RESULTS:
| /home/artsi0m/howm/2023/10/2023-10-22-232104.txt | /home/artsi0m/howm/2023/10/2023-10-26-141834.txt | /home/artsi0m/howm/2023/10/2023-10-29-175555.txt | /home/artsi0m/howm/2023/11/2023-11-10-121506.txt | /home/artsi0m/howm/2023/11/2023-11-29-163117.txt | /home/artsi0m/howm/2023/11/2023-11-30-114333.txt | /home/artsi0m/howm/2023/12/2023-12-01-082255.txt | /home/artsi0m/howm/2023/12/2023-12-02-152603.txt | /home/artsi0m/howm/2024/01/2024-01-11-034354.txt | /home/artsi0m/howm/2024/01/2024-01-11-082808.txt |
