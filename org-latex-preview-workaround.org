* Workaround for latest version of org-latex-preview

I just removed =(shell-quote-argument)= from the following functions.

** org-latex-preview--tex-compile-async

#+begin_src elisp
(defun org-latex-preview--tex-compile-async (extended-info)
  "Create an `org-async-call' spec to compile the texfile in EXTENDED-INFO."
  (let* ((tex-process-buffer
          (with-current-buffer
              (get-buffer-create org-latex-preview--latex-log)
            (erase-buffer)
            (current-buffer)))
         (tex-compile-command-fmt
          (pcase (plist-get extended-info :latex-compiler)
            ((and (pred stringp) cmd) cmd)
            ((and (pred consp) cmds)
             (when (> (length cmds) 1)
               (warn "Preview :latex-compiler must now be a single command.  %S will be ignored."
                     (cdr cmds)))
             (car cmds))))
         (texfile (plist-get extended-info :texfile))
         (org-tex-compiler
          (cdr (assoc (plist-get extended-info :latex-processor)
                      org-latex-preview-compiler-command-map)))
         (tex-command-spec
          `((?o . , temporary-file-directory)
            (?b . , (file-name-base texfile))
            (?f . , texfile)
            (?l . ,org-tex-compiler)
            (?L . ,(car (split-string org-tex-compiler)))))
         (tex-formatted-command
          (split-string-shell-command
           (format-spec tex-compile-command-fmt tex-command-spec))))
    (unless org-tex-compiler
      (user-error "No `org-latex-preview-compiler-command-map' entry found for LaTeX processor %S, it should be a member of `org-latex-compilers' %S"
                  (plist-get extended-info :latex-processor)
                  org-latex-compilers))
    (with-current-buffer tex-process-buffer
      (erase-buffer)
      (insert "RUNNING: "
              (format-spec tex-compile-command-fmt tex-command-spec)
              "\n")
      (add-text-properties (point-min) (1- (point))
                           '(face ((:height 0.8) font-lock-comment-face header-line))))
    (list 'org-async-task
          tex-formatted-command
          :buffer tex-process-buffer
          :info extended-info
          :filter #'org-latex-preview--latex-preview-filter
          :failure
          (lambda (exit-code _buf _info)
            ;; With how preview.sty works, an exit code of 1 is expectd.
            (unless (eq exit-code 1)
              (message "LaTeX compilation for preview failed (error code %d). Please see %s for details"
                       exit-code
                       (propertize org-latex-preview--latex-log
                                   'face 'warning)))))))

#+end_src

#+RESULTS:
: org-latex-preview--tex-compile-async

** org-latex-preview--image-extract-async

#+begin_src elisp
  (defun org-latex-preview--image-extract-async (extended-info)
  "Create an `org-async-call' spec to extract images according to EXTENDED-INFO."
  (let* ((img-process-buffer
          (with-current-buffer
              (get-buffer-create org-latex-preview--image-log)
            (erase-buffer)
            (current-buffer)))
         (appearance-options (plist-get extended-info :appearance-options))
         (img-extract-command
          (pcase
              (or (and (string= (plist-get appearance-options :background)
                                "Transparent")
                       (plist-get extended-info :transparent-image-converter))
                  (plist-get extended-info :image-converter))
            ((and (pred stringp) cmd) cmd)
            ((and (pred consp) cmds)
             (when (> (length cmds) 1)
               (warn "Preview converter must now be a single command.  %S will be ignored."
                     (cdr cmds)))
             (car cmds))))
         (dpi (* 1.4 ; This factor makes it so generated PNGs are not blury
                     ; at the displayed resulution.
                 (or (plist-get appearance-options :scale) 1.0)
                 (if (display-graphic-p)
                     (org-latex-preview--get-display-dpi)
                   140.0)))
         (texfile (plist-get extended-info :texfile))
         (texfile-base (file-name-base texfile))
         (img-command-spec
          `((?o . ,temporary-file-directory)
            (?b . ,(file-name-base texfile))
            (?B . ,
                    (expand-file-name texfile-base temporary-file-directory))
            (?D . , (format "%s" dpi))
            (?f . ,
                    (expand-file-name
                     (concat texfile-base
                             "." (plist-get extended-info :image-input-type))
                     temporary-file-directory))))
         (img-formatted-command
          (split-string-shell-command
           (format-spec img-extract-command img-command-spec))))
    (with-current-buffer org-latex-preview--image-log
      (erase-buffer)
      (insert "RUNNING: "
              (format-spec img-extract-command img-command-spec)
              "\n")
      (add-text-properties (point-min) (1- (point))
                           '(face ((:height 0.8) font-lock-comment-face header-line))))
    (list 'org-async-task
          img-formatted-command
          :buffer img-process-buffer
          :info extended-info
          :failure
          (format "Creating LaTeX preview images failed (exit code %%d). Please see %s for details"
                  (propertize org-latex-preview--image-log 'face 'warning)))))

#+end_src

#+RESULTS:
: org-latex-preview--image-extract-async
